#!/usr/bin/env python
FLAG_PLOT_L = True
import numpy as np
from yn_linalg_utils import *
import matplotlib as mpl
mpl.use('TkAgg')


# INITIAL PARAMETERS
v_p1 = np.array([-6,2,2]) # First corner of a voxel
v_p2 = np.array([-4,4,4]) # Second corner of a voxel

#Three points of a prism generated by blender
p_p1 = np.array([-2.1680243015289307, 2.8254234790802, 3.5612711906433105])
p_p2 = np.array([-2.3285603523254395, 2.7701902389526, 2.5982730388641357])
p_p3 = np.array([-2.6245181560516357, 3.7175273895263, 2.5847749710083010])




# CALCULATIONS
lines_p_p1, lines_p_p2 = adjacent_prism_lines_from_three_pts(p_p1,p_p2,p_p3)
lines_v_p1, lines_v_p2 = get_voxel_lines(v_p1,v_p2)
planes_prism = adjacent_prism_planes_from_three_pts(p_p1,p_p2,p_p3)
planes_voxel = get_voxel_planes(v_p1,v_p2)

all_pts = np.zeros([0,3])

# Add points from the voxel
voxel_pts = get_voxel_points(v_p1, v_p2)
for i in np.arange(np.size(voxel_pts,0)):
    if is_point_in_planes(planes_prism, voxel_pts[i]):
        all_pts = np.insert(all_pts, 0, voxel_pts[i], axis=0)

for i_line in np.arange(np.size(lines_p_p1, 0)):
    for j_plane in np.arange(np.size(planes_voxel, 0)):
        maybe_pt = intersect_line_plan(lines_p_p1[i_line], lines_p_p2[i_line], planes_voxel[j_plane])
        if is_point_in_voxel(v_p1,v_p2,maybe_pt) and is_point_in_planes(planes_prism, maybe_pt):
            all_pts = np.insert(all_pts, 0, maybe_pt, axis=0)

for i_line in np.arange(np.size(lines_v_p1, 0)):
    for j_plane in np.arange(np.size(planes_prism, 0)):
        maybe_pt = intersect_line_plan(lines_v_p1[i_line], lines_v_p2[i_line], planes_prism[j_plane])
        if is_point_in_voxel(v_p1,v_p2,maybe_pt) and is_point_in_planes(planes_prism, maybe_pt):
            all_pts = np.insert(all_pts, 0, maybe_pt, axis=0)

print(all_pts)
vol_intersect = volume_of_points(all_pts)
vol_voxel = volume_of_points(voxel_pts)
ratio = vol_intersect/vol_voxel



# OUTPUT
print("ratio = " + str(ratio))


if FLAG_PLOT_L:
    fig = plt.figure()
    ax = fig.gca(projection='3d')

    for i in np.arange(np.size(lines_v_p1, 0)):
        plotline3D(ax, lines_v_p1[i], lines_v_p2[i], color="red")

    #for i in np.arange(np.size(lines_p_p1, 0)):
    #    plotline3D(ax, lines_p_p1[i], lines_p_p2[i], color="blue")

    for i in np.arange(np.size(all_pts,0)):
        plotpoint3D(ax, all_pts[i], lbl=str(i))

    # To plot the wireframe, need to loopback the first points to draw the prism correctly
    first_line_p1 = np.array([lines_p_p1[0][0],lines_p_p1[0][1],lines_p_p1[0][2]])
    first_line_p2 = np.array([lines_p_p2[0][0],lines_p_p2[0][1],lines_p_p2[0][2]])
    lines_p_p1_t = np.transpose(lines_p_p1)
    lines_p_p1_t = np.insert(lines_p_p1_t,4,first_line_p1,1)
    lines_p_p2_t = np.transpose(lines_p_p2)
    lines_p_p2_t = np.insert(lines_p_p2_t,4,first_line_p2,1)
    ax.plot_wireframe(np.array([lines_p_p1_t[0], lines_p_p2_t[0]]),
        np.array([lines_p_p1_t[1], lines_p_p2_t[1]]),
        np.array([lines_p_p1_t[2], lines_p_p2_t[2]]))

    ax.grid(which="minor")
    ax.grid(which="major")
    ax.legend()
    plt.xlabel("x")
    plt.ylabel("y")
    plt.show()



#TODO: Function that checks if a point is insidee a prism
#TODO: A 3D Shoelace function from the points????












